/** 
 * 
 */
package io.sarl.simulation.multirotor.behaviors.target

import fr.utbm.airsim.api.Vector3r
import io.sarl.core.DefaultContextInteractions
import io.sarl.lang.core.Address
import io.sarl.simulation.multirotor.communication.NotifyKinematics
import io.sarl.simulation.multirotor.communication.NotifyPose
import io.sarl.simulation.multirotor.perceptions.GroundTruthKinematicsPerception
import io.sarl.simulation.multirotor.perceptions.IPose
import io.sarl.simulation.multirotor.perceptions.PosePerception
import java.util.concurrent.ConcurrentHashMap
import org.arakhne.afc.math.geometry.d3.d.Vector3d

import static extension io.sarl.math.extensions.Vector3dExtensions.normalized

/** 
 * Represents the abstract reach target point behavior
 * @author Alexandre Lombard
 */
abstract behavior AbstractReachTargetPoint {
	
	uses DefaultContextInteractions
	
	// region Goal of the agent
	protected var targetPoint : Vector3d = null
	// endregion

	// region Internal state of the agent
	protected var initialPose : IPose = null
	protected var initialVelocity : Vector3d = null
	protected var pose : IPose
	protected var velocity = new Vector3d()
	// endregion
	
	// region Data about the state of the other agents
	protected val neighbours = new ConcurrentHashMap<Address, ExternalDroneState>
	// endregion

	/** 
	 * When the pose of another agent is received, we register it in the map of neighbours
	 */
	on NotifyPose [!isMe(occurrence.source)] {
		if (neighbours.containsKey(occurrence.source)) {
			neighbours.put(occurrence.source,
				new ExternalDroneState(neighbours.get(occurrence.source), occurrence.pose))
		} else {
			neighbours.put(occurrence.source, new ExternalDroneState(occurrence.pose, null))
		}
	}

	/** 
	 * When the kinematic state of another agent is received, we register it in the map of neighbours
	 */
	on NotifyKinematics [!isMe(occurrence.source)] {
		if (neighbours.containsKey(occurrence.source)) {
			neighbours.put(occurrence.source,
				new ExternalDroneState(neighbours.get(occurrence.source), occurrence.state))
		} else {
			val nullPose: IPose = null
			neighbours.put(occurrence.source, new ExternalDroneState(nullPose, occurrence.state))
		}
	}

	/**
	 * When a ground truth kinematics perception is received, the velocity is updated and the other agents are notified 
	 */
	on GroundTruthKinematicsPerception {
		// Update the internal velocity state
		val newVelocity = occurrence.state.linearVelocity
		
		this.velocity = newVelocity

		if (this.initialVelocity === null)
			this.initialVelocity = newVelocity

		emit(new NotifyKinematics(occurrence.state))
	}

	/**
	 * When a pose perception is received, update the internal state and notify other agents
	 */
	on PosePerception {
		// Update the internal pose state and fix the target point if not set
		val newPose = occurrence.pose
		this.pose = newPose

		if (this.initialPose === null)
			this.initialPose = newPose

		emit(new NotifyPose(newPose))
	}

	/**
	 * Utility extension function to convert a Vector3r (from AirSim API) to a Vector3 (SARL)
	 */
	def toVector3(v: Vector3r) {
		return new Vector3d(v.x, v.y, v.z)
	}
	
	/**
	 * Computes the sliding scale (exponentially decreasing according to the collision time t)
	 * @param t the time before potential collision
	 * @param alpha a scaling value (a bigger value will cause a bigger scale)
	 * @param tau a time factor: if tau increases, the sliding scale will increase faster when t decreases
	 */
	def computeSlidingScale(t : double, offset : double = 0.25, alpha : double = 2, tau : double = 8) {
		return ((alpha - offset) * Math.exp(-t / tau) ) + offset
	}
	
	/**
	 * Computes the attraction force given the target direction and the sliding scale
	 * @param targetDirection the direction to the target
	 * @param slidingScale the current sliding scale
	 * @param w scaling factor on the attraction (the bigger it is, the bigger the attraction is)
	 * @param alpha if alpha is small the relative importance of the sliding scale will quickly decrease
	 */
	def computeAttraction(targetDirection : Vector3d, slidingScale : double, w : double = 10.0,
		alpha : double = 2.0) {
		val delta = if(slidingScale < 1e-7f) 1f else 1f - Math.exp(-alpha / slidingScale)
		return targetDirection.normalized * ((w * delta))
	}
}
