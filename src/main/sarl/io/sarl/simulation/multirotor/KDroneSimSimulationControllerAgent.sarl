/** 
 * 
 */
package io.sarl.simulation.multirotor

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.simulation.behaviors.SimulationController
import io.sarl.simulation.capacities.AgentBodyAffectationCapacity
import io.sarl.simulation.capacities.ApplyInfluenceCapacity
import io.sarl.simulation.capacities.PropagatePerceptionsCapacity
import io.sarl.simulation.capacities.SimulationControlCapacity
import io.sarl.simulation.events.StartSimulation
import io.sarl.simulation.multirotor.behaviors.MultirotorInfluenceEmitter
import io.sarl.simulation.multirotor.behaviors.MultirotorPerceptionRetriever
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationControlCapacity
import io.sarl.simulation.multirotor.capacities.MultirotorSimulationPerceptionCapacity
import io.sarl.simulation.multirotor.kdronesim.skills.KDroneSimMultirotorControl
import io.sarl.simulation.multirotor.kdronesim.skills.KDroneSimMultirotorSimulationPerception
import io.sarl.simulation.multirotor.kdronesim.skills.KDroneSimSimulationControl
import io.sarl.simulation.skills.BatchedPerceptionsPropagation
import io.sarl.simulation.skills.FcfsFixedSizePoolAgentBodyAffectation
import io.sarl.simulation.skills.influences.BatchedInfluenceApplication
import java.util.Collections
import io.sarl.core.Schedules

/**
 * Agent in charge of controlling the simulation, transmitting the influences and
 * dispatching the perceptions .
 * This agent has basically 3 main roles and capacities:
 * - Managing the propagation of perceptions and influences
 * - Managing the simulation schedule
 * - Managing the affectation of bodies to agents
 * @author Alexandre Lombard
 * 
 */
agent KDroneSimSimulationControllerAgent {
	
	uses DefaultContextInteractions, Behaviors, Schedules

	uses AgentBodyAffectationCapacity
	
	// For test:
	uses SimulationControlCapacity

	val pool = (0 .. 10).map[it.toString].toList
	
	on Initialize {
		// Install the simulation control capacities
		setSkill(new KDroneSimSimulationControl, SimulationControlCapacity)
		setSkill(new KDroneSimMultirotorControl, MultirotorSimulationControlCapacity)
 		setSkill(new KDroneSimMultirotorSimulationPerception, MultirotorSimulationPerceptionCapacity)
		
		// region Simulation management: defining skills and behaviors
		setSkill(new FcfsFixedSizePoolAgentBodyAffectation([|
			val pool = pool
			Collections.shuffle(pool)
			return pool
		].apply), AgentBodyAffectationCapacity)
		
		setSkill(new BatchedInfluenceApplication(
			[t, i|i.size >= affectedBodiesCount],
			2,
			false
		), ApplyInfluenceCapacity)
		
		setSkill(new BatchedPerceptionsPropagation(), PropagatePerceptionsCapacity)
		
		registerBehavior(new MultirotorInfluenceEmitter(this))
		registerBehavior(new MultirotorPerceptionRetriever(this))
		registerBehavior(new SimulationController(this))
		// endregion
		
		emit(new StartSimulation)
		
		// Test:
		every(1000) [
			simPrintLogMessage("Hello world", "", 0)
		]
	}
}
